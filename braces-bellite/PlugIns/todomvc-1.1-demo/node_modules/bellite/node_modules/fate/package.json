{
  "name": "fate",
  "version": "0.5.3",
  "license": "MIT",
  "description": "Futures, Promises and Deferreds",
  "keywords": [
    "future",
    "promise",
    "deferred"
  ],
  "author": {
    "name": "Shane Holloway",
    "email": "shane@techgame.net"
  },
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/shanewholloway/node-fate.git"
  },
  "main": "fate.js",
  "scripts": {
    "test": "node_modules/.bin/mocha test-aplus.js"
  },
  "devDependencies": {
    "mocha": "~1.8.1",
    "promises-aplus-tests": "~1.3.1"
  },
  "readme": "[![Promises/A+ 1.0 compliant][A+logo]][A+]\n\nFate is a closure based implementation of [Promises/A+][A+]\n\n [A+]: http://promises-aplus.github.com/promises-spec\n [A+logo]: http://promises-aplus.github.com/promises-spec/assets/logo-small.png\n\n\n## Promises and Futures\nA `Promise` is an object with a `then(onFulfilled, onRejected)` closure.\n\nA `Future` is a `Promise` with bound `fulfill(value)` and `reject(reason)` closures.\n\n`deferred()` returns an unresolved `Future` instance.\n\n`fulfilled(result)` returns a fulfilled `Future` instance.\n\n`rejected(error)` returns a rejected `Future` instance.\n\n---\n`inverted(aFuture)` returns a `Future` instance with `reject()` and `fulfill()` transposed.\n\n---\n`delay(ms)` returns a `deferred()` that will be answered after `ms` timeout.\n\n`timeout(target, ms)` returns a `delay(ms)` that will additionally be answered upon `target` being answered.\n\n\n## Compound Promises\n`each(anArray)` is a compound `deferred()` answered after\nall promises in `anArray` are either rejected or fulfilled.\n\nFulfilled if *all* promise are fulfilled from `anArray`.\n\nRejected if *any* promises is rejected from `anArray`.\n\n---\n`all(anArray)` is a compound `deferred()` answered after\nall promises are fulfilled, or when any promise is rejected.\n\nFulfilled if *any* promise is fulfilled from `anArray`.\n\nRejected if *all* promises are rejected from `anArray`.\n\n---\n`first(anArray)` is a compound `deferred()` answered after\nany promise is either fulfilled or rejected.\n\nFulfilled if *any* promise is fulfilled from `anArray`.\n\nRejected if *all* promises are rejected from `anArray`.\n\n---\n`any(anArray)` is a compound `deferred()` answered after\nany promise is fulfilled, or when all are rejected.\n\nFulfilled if *any* promise is fulfilled from `anArray`.\n\nRejected if *all* promises are rejected from `anArray`.\n\n",
  "_id": "fate@0.5.3",
  "_from": "fate@>0.5.x"
}
